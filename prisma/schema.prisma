// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model User {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  email           String        @unique
  password        String
  name            String?
  role            Role?         @default(USER)
  totalUpvotes    Int?          @default(0)
  totalDownvotes  Int?          @default(0)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  questions       Questions[]
  replies         Replies[]
  
}


model Questions {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  user            User           @relation(fields: [userId], references: [id])
  userId          String         @db.ObjectId
  title           String
  description     String
  upvotes         Int?           @default(0)
  downvotes       Int?           @default(0)
  priority        Int
  status          String 
  category        String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  questionContent QuestionContent[]
  userVotes       UserVotes[]
  replies         Replies[]
}


model QuestionContent {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  question        Questions      @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId      String         @db.ObjectId
  order           Int            
  type            String
  content         String  
}

model UserVotes {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  question        Questions        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId      String           @db.ObjectId
  userId          String           @db.ObjectId 
  currentVoteToggle      String?   @default("none")
  
  @@unique(fields: [questionId, userId], name: "uniqueUserVoteId")

}


model Replies {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  questionId      String         @db.ObjectId
  userId          String         @db.ObjectId
  title           String
  description     String
  upvotes         Int?           @default(0)
  downvotes       Int?           @default(0)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  user            User           @relation(fields: [userId], references: [id])
  question        Questions      @relation(fields: [questionId], references: [id], onDelete: Cascade)
  preferredAnswer Boolean?       @default(false)
  replyContent           RepliesContent[]
  repliesUserVotes       RepliesUserVotes[]
}



model RepliesContent {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  reply           Replies        @relation(fields: [replyId], references: [id], onDelete: Cascade)
  replyId         String         @db.ObjectId
  order           Int            
  type            String
  content         String  
}



model RepliesUserVotes {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  reply           Replies          @relation(fields: [replyId], references: [id], onDelete: Cascade)
  replyId         String           @db.ObjectId
  userId          String           @db.ObjectId  
  currentVoteToggle      String?   @default("none")

  @@unique(fields: [replyId, userId], name: "uniqueRepliesUserVoteId")

}


enum Role {
  USER
  ADMIN 
}